buildscript {
    ext {
        springBootVersion = '2.1.7.RELEASE'
        mooworkVersion = '1.2.0'
    }
    repositories {
        // NOTE: You should declare only repositories that you need here
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${mooworkVersion}")
    }
}


plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
//    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'
apply plugin: 'application'

mainClassName = 'com.tandem6.housingfinance.HousingFinanceApplication'
group = 'com.tandem6'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    compile("org.springframework.boot:spring-boot-starter-security")
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    compile group: 'org.qlrm', name: 'qlrm', version: '2.0.2'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
}

def webappDir = "$projectDir/client"

node {
    version = '12.6.0'
    download=true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir=file("${project.buildDir}/npm")
}

task appNpmInstall(type: NpmTask) {
    workingDir = file("${project.projectDir}/client")
    args = ["install"]
}

task yarnBuild(type: YarnTask) {
    workingDir = file("${project.projectDir}/client")
    args = ['build']
}

task copyWebApp(type: Copy) {
    from "client/build"
    into 'build/resources/main/static/.'
}

task clientBuild(type: Task) {
    println("Start Client Build")
}

yarnBuild.dependsOn appNpmInstall
copyWebApp.dependsOn yarnBuild
clientBuild.dependsOn copyWebApp
